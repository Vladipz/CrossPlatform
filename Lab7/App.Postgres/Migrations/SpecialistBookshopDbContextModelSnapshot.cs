// <auto-generated />
using System;
using App.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Postgres.Migrations
{
    [DbContext(typeof(SpecialistBookshopDbContext))]
    partial class SpecialistBookshopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorContactDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("AuthorDateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AuthorFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AuthorGenderMFU")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorInitials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthorLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthorOtherDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("App.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("BookCategoryCode")
                        .HasColumnType("integer");

                    b.Property<string>("BookComments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("BookRecommendedPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAcquired")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfPublication")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookCategoryCode");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("App.Models.BookCategory", b =>
                {
                    b.Property<int>("BookCategoryCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookCategoryCode"));

                    b.Property<string>("BookCategoryDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BookCategoryCode");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("App.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContactId"));

                    b.Property<string>("ContactCellPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactFirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactLastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactOtherDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ContactTypeCode")
                        .HasColumnType("integer");

                    b.Property<string>("ContactWorkPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ContactId");

                    b.HasIndex("ContactTypeCode");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("App.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("App.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("OrderValue")
                        .HasColumnType("numeric");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("App.Models.OrderItem", b =>
                {
                    b.Property<int>("ItemNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemNumber"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ItemAgreedPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("ItemComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.HasKey("ItemNumber");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("App.Models.RefContactType", b =>
                {
                    b.Property<int>("ContactTypeCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContactTypeCode"));

                    b.Property<string>("ContactTypeDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ContactTypeCode");

                    b.ToTable("RefContactTypes");
                });

            modelBuilder.Entity("App.Models.Book", b =>
                {
                    b.HasOne("App.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.BookCategory", "BookCategory")
                        .WithMany()
                        .HasForeignKey("BookCategoryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BookCategory");
                });

            modelBuilder.Entity("App.Models.Contact", b =>
                {
                    b.HasOne("App.Models.RefContactType", "RefContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefContactType");
                });

            modelBuilder.Entity("App.Models.Order", b =>
                {
                    b.HasOne("App.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("App.Models.OrderItem", b =>
                {
                    b.HasOne("App.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
